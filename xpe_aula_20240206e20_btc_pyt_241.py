# -*- coding: utf-8 -*-
"""XPE-AULA- 20240206e20 BTC PYT 241.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H3dPJ3F6sn34iu8zum-bTAGQs-CWmFvV

# Eduardo Miranda
eduardo.dpm@gmail.com

https://linkedin.com/in/eduardopmiranda

# Tipos de dados Python
üìå O material a seguir foi traduzido de [python-course.eu](https://python-course.eu/)

| Tipo | Categoria | Exemplo|
|:--------|:--------:|:--------:|
| **Bool** | | *True*, *False* |
| **Int** | N√∫mero | 20 |
| **Float** | N√∫mero | 35.75 |
| **complex** | N√∫mero | 1+3j |
| **String** | Sequ√™ncia | "Python" |
| **List** | Sequ√™ncia | [2, "a", 5.7] |
| **Tuple** | Sequ√™ncia | (3, 4.5, "n") |
| **Set** | | {2, 4, 6} |
| **Dict** | | {"Treinamento":"Prepara√ß√£o de Dados com Python", "Data": "07/12/2022"} |

Existem diferentes maneiras de definir strings em Python:

```python
s = 'Sou uma string entre aspas simples.'
s2 = "Sou outra string, mas estou entre aspas duplas."
```

Ambos `s` e `s2` do exemplo anterior s√£o vari√°veis que fazem refer√™ncia a objetos string. Podemos ver que as strings literais podem ser colocadas entre aspas simples (') ou aspas duplas (").

```python
s3 = 'N√£o importa!'
```

E se quisermos criar um texto contendo aspas simples ou aspas duplas? Nestes casos teremos que escapar de aspas dentro de uma string.

```python
txt = "Ele disse: \"N√£o importa, se voc√™ colocar uma string entre aspas simples ou duplas!\""
print(txt)
```
"""

s = "XP Educaca'o 2024"

print(s)

"""Uma string em Python consiste em uma s√©rie ou sequ√™ncia de caracteres ‚Äî letras, n√∫meros e caracteres especiais. Strings podem ser subscritas ou indexadas. Semelhante a C, o primeiro caractere de uma string tem o √≠ndice 0.

```python
s = "Hello World"
s[0]
```
"""

#    0123456789
s = "Ola mundo 2024"
print(s[4:9])

resultado = s.split()

resultado[2]

s = 123

print(s)

type(s)

"""# üóÉÔ∏è ```Collections``` no Python

Cole√ß√µes em Python s√£o cont√™ineres usados para armazenar dados e s√£o comumente conhecidos como estruturas de dados, como ```listas```, ```tuplas```, ```sets```, ```dicion√°rios```, etc. Al√©m disso, o Python possui um m√≥dulo de cole√ß√µes integrado que fornece estruturas de dados adicionais para cole√ß√µes de dados.

## Listas
As listas s√£o usadas para armazenar v√°rios itens em uma √∫nica vari√°vel. As listas s√£o um dos 4 tipos de dados internos do Python usados para armazenar cole√ß√µes de dados.

- Os itens da lista s√£o indexados, o primeiro item tem √≠ndice ```[0]```, o segundo item tem √≠ndice ```[1]``` etc.
- Os itens da lista s√£o ordenados, alter√°veis (mut√°veis) e permitem valores duplicados.
  - Quando dizemos que as listas s√£o ordenadas, significa que os itens t√™m uma ordem definida, e essa ordem n√£o ser√° alterada. Se voc√™ adicionar novos itens a uma lista, os novos itens ser√£o colocados no final da lista.
  - A lista √© mut√°vel, o que significa que podemos alterar, adicionar e remover itens em uma lista ap√≥s ela ter sido criada.
  - Como as listas s√£o indexadas, as listas podem ter itens com o mesmo valor.
"""

#                  0          1         2           3        4
#                 -5         -4        -3          -2       -1
lista_compras = ["arroz", "feijao", "macarrao", "acucar", "batata"]

print(lista_compras[0:-1])

lista_compras.append("leite")

print(lista_compras)

del lista_compras[0]

print(lista_compras)

lista_compras[1] = "Macarrao"

print(lista_compras)

lista_maluca = [123, "arroz", 1+3j, ["python"] ]

print(lista_maluca[3][0])

"""## üìö Exerc√≠cio: Listas

1. Escreva um programa Python para elevar ao quadrado todos os itens da **lista** ```[2, 3, 4, 5, 6, 7]```.

2. Escreva um programa Python para imprimir na tela apenas os elementos pares da lista ```[ 766, 57, 121, 4, 897, 1212, 87237, 1]```

3. Escreva um programa em Python para:
  - Converter uma string em lista separando a string pelo caractere espa√ßo;
  - Selecionar as palavras onde o primeiro e o √∫ltimo caractere s√£o  iguais;
  - Selecionar as palavras que possuem 2 ou mais caracteres.

**String**:
*At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.*
"""

lista = [2, 3, 4, 5, 6, 7]

 for elemento in lista:
  print(elemento, elemento ** 2)

lista = [2, 3, 4, 5, 6, 7]
lista_quadradro = [ i**2 for i in lista ]

lista_quadradro

lista = [ 766, 57, 121, 4, 897, 1212, 87237, 1]

for elemento in lista:
  if elemento % 2 == 0 :
    print(elemento)

lista = [766, 57, 121, 4, 897, 1212, 87237, 1]

pares = [elemento for elemento in lista if elemento % 2 == 0]

print(pares)

"""---
## Dicion√°rios
Os dicion√°rios Python nos permitem associar um valor a uma chave √∫nica e, em seguida, acessar rapidamente esse valor. √â uma boa ideia us√°-los sempre que quisermos encontrar (procurar) um determinado objeto Python. Tamb√©m podemos usar listas para esse escopo, mas elas s√£o muito mais lentas que os dicion√°rios.

Essa velocidade se deve ao fato de que as chaves do dicion√°rio s√£o ```hashable```. Todo objeto imut√°vel em Python √© **hash**, ent√£o podemos pass√°-lo para a fun√ß√£o ```hash()```, que retornar√° o valor de **hash** desse objeto. Esses valores s√£o usados para pesquisar um valor associado √† sua chave exclusiva.

### Quando utilizar dicion√°rios?

- **Voc√™ deseja armazenar objetos e dados usando nomes, n√£o apenas posi√ß√µes ou n√∫meros de √≠ndice**. Se voc√™ deseja armazenar elementos para que possa recuper√°-los por seu n√∫mero de √≠ndice, use uma lista. Observe que voc√™ pode usar n√∫meros inteiros como chaves de √≠ndice, mas isso n√£o √© exatamente o mesmo que armazenar dados em uma estrutura de lista, que √© otimizada para a√ß√µes como adicionar ao final da lista. (Dicion√°rios, como voc√™ ver√°, n√£o t√™m elemento "fim" ou "in√≠cio" como tal.)
- **Voc√™ precisa encontrar dados e objetos rapidamente pelo nome**. Os dicion√°rios s√£o otimizados para que as pesquisas de chaves sejam quase sempre em tempo constante, independentemente do tamanho do dicion√°rio. Voc√™ tamb√©m pode encontrar um elemento em uma lista por sua posi√ß√£o em tempo constante, mas n√£o pode procurar um elemento espec√≠fico rapidamente - voc√™ precisa percorrer uma lista para encontrar uma coisa espec√≠fica se n√£o souber sua posi√ß√£o.
- **A ordem dos elementos n√£o √© t√£o importante quanto sua presen√ßa** ‚ö†Ô∏è. Se a ordem dos elementos importa mais do que se um determinado elemento existe ou n√£o na cole√ß√£o, use uma lista. Al√©m disso, como voc√™ notar√° abaixo, embora os dicion√°rios preservem a ordem em que esses elementos s√£o inseridos, isso n√£o √© o mesmo que poder usar ```seek()``` para buscar rapidamenteo *en√©simo* elemento .

‚ö†Ô∏è A partir da vers√£o ```3.7``` do Python, os dicion√°rios s√£o ordenados. No Python ```3.6``` e anteriores, os dicion√°rios n√£o s√£o ordenados. Quando dizemos que os dicion√°rios est√£o ordenados, significa que os itens t√™m uma ordem definida, e essa ordem n√£o ser√° alterada.
"""

dicionario = dict()

dicionario = {}

type(dicionario)

dicionario[12346578912] = "Eduardo Miranda"

print(dicionario)

dicionario[98765432185] = "Patricia Miranda"

print(dicionario)

print( dicionario )

dicionario[12346578912] = {"nome":"Eduardo", "e-mail":"eduardo.dpm@gmail.com", "cidade":"Sao Paulo"}

print( dicionario )

print( dicionario[12346578912]['e-mail'] )

"""## üìö Exerc√≠cio: Dicion√°rios

1. Escreva um programa Python para gerar e imprimir um dicion√°rio que contenha um n√∫mero (entre 1 e ```n```) no formato (x, x*x). Para ```n = 5``` o resultado esperado √© ```{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}```

2. No dicion√°rio a seguir, imprima na tela a nota de Portugu√™s da Patr√≠cia.

```json
sampleDict = {
    "classe": {
        "estudantes": {
            "Eduardo": {
                "Matem√°tica": 70,
                "Portugu√™s": 80
            },
            "Patr√≠cia": {
                "Matem√°tica": 50,
                "Portugu√™s": 90
            },
            "Mayara": {
                "Matem√°tica": 98,
                "Portugu√™s": 89
            }
        },
        "turno": "Manh√£"
    }
}
```

6. A partir do dicion√°rio de notas a seguir, imprima na tela a disciplina de menor nota.

```json
notas = {
    "Portugu√™s": 9,
    "Matem√°tica": 7,
    "Geografia": 8,
    "Filosofia":8,
    "Biologia":4,
    "Qu√≠mica": 9
}
```
"""

dicionario = {}
n = 5

for i in range(1,n+1):
  dicionario[i] = i**2

dicionario

# Dict comprehension
n = 5
dicionario2 = {  i : i**2 for i in range(1, n + 1) }

dicionario2

"""Baseado no C√≥digo 10, seja y_true os valores que devem ser previstos a partir de um modelo de aprendizado de m√°quinas e y_pred os valores que de fato foram previstos por esse modelo. O que o comando np.sqrt(((y_true-y_pred)**2).mean()) ir√° retornar?
Grupo de escolhas da pergunta

A raiz quadrada do erro quadr√°tico m√©dio do modelo.

A m√©dia do erro absoluto do modelo.

A taxa de falsos positivos do modelo.

O erro quadr√°tico m√©dio do modelo.
"""

import numpy as np
y_true = np.array([1., 2., 1.])
y_pred = np.array([1.1, 1.98, 1.05])

np.sqrt(((y_true - y_pred)**2).mean())

((1 - 1.1)**2)

import pandas as pd
df_players = pd.read_csv('https://datasets-aulas.s3.amazonaws.com/Players.csv')
df_players

"""---
# üêº Python Pandas

Pandas √© uma ferramenta de an√°lise e manipula√ß√£o de dados de c√≥digo aberto, r√°pida, poderosa, flex√≠vel e f√°cil de usar, constru√≠do sobre a linguagem de programa√ß√£o Python.
    
Em 2008, o desenvolvimento de pandas come√ßou na AQR Capital Management. No final de 2009, ele era de c√≥digo aberto e hoje √© ativamente apoiado por uma comunidade de indiv√≠duos com ideias semelhantes em todo o mundo que contribuem com seu valioso tempo e energia para ajudar a tornar os pandas de c√≥digo aberto poss√≠veis.

‚Äî Fonte: https://pandas.pydata.org/about/

## Series
*Uma s√©rie √© um objeto unidimensional semelhante a uma matriz contendo uma sequ√™ncia de valores (de tipos semelhantes aos tipos NumPy) e uma matriz associada de r√≥tulos de dados, chamada de √≠ndice.*

‚Äî Livro: [Python for Data Analysis Data Wrangling with Pandas, NumPy, and IPython](https://www.amazon.com.br/Python-Data-Analysis-Wes-Mckinney/dp/1491957662)

## DataFrame
*Um DataFrame representa uma tabela retangular de dados e cont√©m uma cole√ß√£o ordenada de colunas, cada uma das quais pode ser um tipo de valor diferente (num√©rico, string,booleano, etc). O DataFrame tem um √≠ndice de linha e coluna; pode ser pensado como um dict de Series todos compartilhando o mesmo √≠ndice. Sob o cap√¥, os dados s√£o armazenados como um ou mais blocos bidimensionais em vez de uma lista, dict ou alguma outra cole√ß√£o de matrizes unidimensionais.*

‚Äî Livro: [Python for Data Analysis Data Wrangling with Pandas, NumPy, and IPython](https://www.amazon.com.br/Python-Data-Analysis-Wes-Mckinney/dp/1491957662)
"""

import pandas as pd

# Cria√ß√£o de um novo dicion√°rio do Python onde o valor para cada chave √© uma lista de mesmo tamanho.

dados = {
    'ano'    : [ 2021, 2021, 2021, 2022, 2022],
    'm√™s'    : [ 'Outubro', 'Novembro', 'Dezembro', 'Janeiro', 'Fevereiro'],
    'volume' : [ 156.6, 96.8, 167.6, 378.6, 69.2]
}

# Um Dataframe est√° sendo criado a partir da lista criada anteriormente. E, diferente do exemplo da S√©rie,
# onde a chave havia se tornado o √≠ndice, aqui as chaves do dicion√°rio se tornaram as colunas do Dataframe

dframe = pd.DataFrame( dados )

dframe

dframe[ dframe['volume'] > 120 ]

"""## M√©todos do pacote Pandas para importa√ß√£o de dados

Existem v√°rios formatos de arquivos para armazenamento de dados: .csv, .json, .xlsx etc. e que podem ser armazenado em locais diferentes, em sua m√°quina local ou √†s vezes online. Nesta se√ß√£o, voc√™ aprender√° como carregar um conjunto de dados no Jupyter Notebook.

- [pandas.read_excel()](https://pandas.pydata.org/docs/reference/api/pandas.read_excel.html)
- [pandas.read_csv()](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html)
- [pandas.read_table()](https://pandas.pydata.org/docs/reference/api/pandas.read_table.html)
- [pandas.read_sql()](https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html)
- [pandas.read_json()](https://pandas.pydata.org/docs/reference/api/pandas.read_json.html)
- [pandas.read_html()](https://pandas.pydata.org/docs/reference/api/pandas.read_html.html)
"""

import pandas as pd
tables = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")

tables[0]

dfSP500 = tables[0]
dataFundacaoMaisAntigo = dfSP500['Founded'].min()

dataFundacaoMaisAntigo

dfSP500[ dfSP500['Founded'] == dataFundacaoMaisAntigo ]

dfSP500.sort_values( by = 'Founded', ascending=False).tail(5)

import pandas as pd
dfTSLA = pd.read_csv('https://datasets-aulas.s3.amazonaws.com/dados+cota%C3%A7%C3%B5es/TSLA.csv')
dfTSLA

dfTSLA = dfTSLA.set_index('Date')
dfTSLA

dfTSLA.Close.plot()

"""## üìö Exerc√≠cio: Explore os dados da Tesla utilizando os seguintes m√©todos e propriedades

- [pandas.DataFrame.dtypes](https://pandas.pydata.org/docs/user_guide/basics.html#dtypes)
- [pandas.DataFrame.info()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.info.html)
- [pandas.DataFrame.describe()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html)
- [pandas.DataFrame.head()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html)
- [pandas.DataFrame.tail()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.tail.html#pandas.DataFrame.tail)
- [pandas.DataFrame.index](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.index.html)
- [pandas.DataFrame.columns](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.columns.html)
- [pandas.DataFrame.shape](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html)
- [pandas.DataFrame.size](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.size.html)
- [pandas.DataFrame.count()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.count.html)
- [pandas.DataFrame.max()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html)
- [pandas.DataFrame.min()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html)
- [pandas.DataFrame.mean()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html)
- [pandas.DataFrame.std()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.std.html)
- [pandas.DataFrame.median()](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.median.html)



**Download**: [TSLA.csv](https://drive.google.com/file/d/1PkYUb3fTxzM0T5Lt5tq6OqroKfIw3mte/view?usp=sharing)
"""

dfTSLA.size

"""---
### üìö Exerc√≠cio: An√°lise de informa√ß√µes dos jogadores da NBA ‚õπÔ∏è
Responda as seguintes quest√µes a partir dos dados de jogadores da NBA [NBA Players stats since 1950](https://www.kaggle.com/datasets/drgilermo/nba-players-stats).

1. Qual a m√©dia de altura e de peso dos jogadores?
2. Crie uma nova coluna com o $IMC = \frac{peso}{altura¬≤}$.
3. Qual jogador tem o maior IMC?
4. Qual jogador tem o menor IMC?
5. Qual a maior altura, o maior peso, a menor altura e o menor peso?
6. Em qual estado americano nasceu o maior n√∫mero de jogadores?
7. Qual ou quais s√£o os jogadores mais altos?

**Download**: [Players.csv](https://drive.google.com/file/d/1DuC5gbhvv_ZzFaebi9yuc0ZuuWaLBI9J/view?usp=sharing)
"""

import pandas as pd
dfPlayers = pd.read_csv('https://datasets-aulas.s3.amazonaws.com/Players.csv')
dfPlayers

"""#### 1Ô∏è‚É£ Qual a m√©dia de altura e de peso dos jogadores?"""

dfPlayers.describe()

#dfPlayers.height.mean() media ...
dfPlayers['height'].mean()

dfPlayers.weight.mean()

"""#### 2Ô∏è‚É£ Crie uma nova coluna com o  $IMC = \frac{peso}{altura¬≤}$."""

dfPlayers['IMC'] = dfPlayers.weight / (dfPlayers.height / 100)  ** 2

dfPlayers

"""#### 3Ô∏è‚É£ Qual jogador tem o maior IMC?"""

dfPlayersMax = dfPlayers.sort_values(by=['IMC'], ascending=False).head(5)
dfPlayersMax

"""#### 4Ô∏è‚É£ Qual jogador tem o menor IMC?"""

dfPlayersMin = dfPlayers.sort_values(by=['IMC'], ascending=True).head(5)
dfPlayersMin

dfPlayers[ dfPlayers['IMC'] == dfPlayers['IMC'].min() ]

dfPlayers[ dfPlayers['IMC'] == dfPlayers['IMC'].max() ]

"""#### 6Ô∏è‚É£ Em qual estado americano nasceu o maior n√∫mero de jogadores?"""

dfPlayers.groupby('birth_state')['Player'].count().sort_values(ascending=False)

# Observe aqui o value_Counts ja √© mais simples ainda e funciona igual
dfPlayers.birth_state.value_counts()

"""#### 7Ô∏è‚É£ Qual ou quais s√£o os jogadores mais altos?"""

max_altura = dfPlayers.height.max()
max_altura

dfPlayers[ dfPlayers.height == max_altura]

min_altura = dfPlayers.height.min()
min_altura

dfPlayers[ dfPlayers.height == min_altura]