# -*- coding: utf-8 -*-
"""XPE-RESOLU√á√ÉO-Pythonparaweb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12c1Jj2kI0sWoCtNXa3Qx2dgpTuiynHQ9
"""



import pandas as pd # Cria√ß√£o de um novo dicion√°rio do Python onde o valor para cada chave √© uma lista de mesmo tamanho.
#dados = { 'ano' : [ 2021, 2021, 2021, 2022, 2022], 'm√™s' : [ 'Outubro', 'Novembro', 'Dezembro', 'Janeiro', 'Fevereiro'],
#'volume' : [ 156.6, 96.8, 167.6, 378.6, 69.2] } # Um Dataframe est√° sendo criado a partir da lista criada anteriormente.
# E, diferente do exemplo da S√©rie, # onde a chave havia se tornado o √≠ndice, aqui as chaves do dicion√°rio se
# tornaram as colunas do Dataframe dframe = pd.DataFrame( dados )

import pandas as pd
tables = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")
# Assuming tables is already assigned correctly
earliest_date = tables[0]['Date added'].min()
print(earliest_date)  # Output the earliest date

tables[0]['Date added'].min()

"""Descobrindo que √© a empresa mais antiga do S&P500...BK Bank of New York Mellon"""

import pandas as pd
tables = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")
tables[0]['Date added'].min()
# BK Bank of New York Mellon
tables[0]

print(type(tables))

print(type(tables[0]))

# Descobrir qual empresa com a data de funda√ß√£o mais antiga

# vamos atribuir ela a um objeto, para come√ßar a pesquisa
dfSP500 = tables[0]
dataFundacaoMaisAntigo = dfSP500['Founded'].min()

# Vamos imprimir este valor (ano) ?
dataFundacaoMaisAntigo

dfSP500[ dfSP500['Founded'] == dataFundacaoMaisAntigo ]

# Metodo que permite me ordenar os dados !! sort_values
dfSP500.sort_values( by = 'Founded', ascending = True)

# Metodo que permite me ordenar os dados !! sort_values, agora s√≥ com as 5 primeiras
dfSP500.sort_values( by = 'Founded', ascending = True).head(5)

# Metodo que permite me ordenar os dados !! sort_values, agora s√≥ com as 5 primeiras
dfSP500.sort_values( by = 'Founded', ascending = True).tail(5)

# importanto os dados de Cota√ß√£o da empresa Telsa
import pandas as pd
dfTSLA = pd.read_csv('https://datasets-aulas.s3.amazonaws.com/dados+cota%C3%A7%C3%B5es/TSLA.csv');
dfTSLA

# aqui abaixo o indice √© colocado automticamente de zero a...
dfTSLA.Close.plot()

dfTSLA.columns

# aqui abaixo o indice √© colocado usando coluna data...
dfTSLA = dfTSLA.set_index('Date')
dfTSLA.Close.plot()

dfTSLA.dtypes

dfTSLA.count()

dfTSLA.describe()

import pandas as pd
dfPlayers = pd.read_csv('https://datasets-aulas.s3.amazonaws.com/Players.csv')
dfPlayers

"""---
### üìö Exerc√≠cio: An√°lise de informa√ß√µes dos jogadores da NBA ‚õπÔ∏è
Responda as seguintes quest√µes a partir dos dados de jogadores da NBA [NBA Players stats since 1950](https://www.kaggle.com/datasets/drgilermo/nba-players-stats).

1. Qual a m√©dia de altura e de peso dos jogadores?
2. Crie uma nova coluna com o $IMC = \frac{peso}{altura¬≤}$.
3. Qual jogador tem o maior IMC?
4. Qual jogador tem o menor IMC?
5. Qual a maior altura, o maior peso, a menor altura e o menor peso?
6. Em qual estado americano nasceu o maior n√∫mero de jogadores?
7. Qual ou quais s√£o os jogadores mais altos?

**Download**: [Players.csv](https://drive.google.com/file/d/1DuC5gbhvv_ZzFaebi9yuc0ZuuWaLBI9J/view?usp=sharing)
"""

# Responda as seguintes quest√µes a partir dos dados de jogadores da NBA NBA Players stats since 1950.
# 1 - Qual a m√©dia de altura e de peso dos jogadores?
dfPlayers.describe()

dfPlayers.describe()[['height', 'weight']]

# Agora a media:

#dfPlayers.height.mean()
dfPlayers['height'].mean()

dfPlayers.height.mean()

#dfPlayers.height.mean()
dfPlayers['weight'].mean()

# 2 - Crie uma nova coluna com o IMC=peso.altura¬≤

#exemplo
dfPlayers['nova_coluna'] = 'XP edu'
dfPlayers

# Calculando o IMC
dfPlayers['IMC'] = dfPlayers.weight / (dfPlayers.height / 100) ** 2
dfPlayers

"""3Ô∏è‚É£ Qual jogador tem o maior IMC?"""

# Sort.. ordenando pelo ascending ... maior resultado pegando os 5 head primeiros
dfPlayersMax = dfPlayers.sort_values(by=['IMC'], ascending=False).head(5)
dfPlayersMax

"""4Ô∏è‚É£ Qual jogador tem o menor IMC?"""

# Sort.. ordenando pelo ascending ... menor resultado pegando os 5 head primeiros
dfPlayersMin = dfPlayers.sort_values(by=['IMC'], ascending=True).head(5)
dfPlayersMin

dfPlayers[ dfPlayers['IMC'] == dfPlayers['IMC'].min() ]

dfPlayers[ dfPlayers['IMC'] == dfPlayers['IMC'].max() ]

"""6Ô∏è‚É£ Em qual estado americano nasceu o maior n√∫mero de jogadores?"""

dfPlayers.groupby('birth_state')['Player'].count().sort_values(ascending=False)

"""Aqui est√° a explica√ß√£o da express√£o `dfPlayers.groupby('birth_state')['Player'].count().sort_values(ascending=False)` em portugu√™s:

**1. `dfPlayers.groupby('birth_state')`:**

- Esta parte agrupa o DataFrame `dfPlayers` com base na coluna `'birth_state'`. Isso significa que o DataFrame ser√° dividido em grupos, onde cada grupo cont√©m linhas com o mesmo estado de nascimento.

**2. `['Player']`:**

- Dentro de cada grupo criado no passo anterior, esta express√£o seleciona a coluna `'Player'`.

**3. `.count()`:**

- Para cada grupo (estado de nascimento), esta etapa conta o n√∫mero de linhas (jogadores) naquele estado.

**4. `.sort_values(ascending=False)`:**

- Por fim, esta parte ordena os resultados da contagem (n√∫mero de jogadores por estado de nascimento) em ordem decrescente. Isso significa que os estados com o maior n√∫mero de jogadores aparecer√£o primeiro na sa√≠da.

**Resumo:**

Esta express√£o calcula e classifica a contagem de jogadores por estado de nascimento no DataFrame `dfPlayers`. O resultado final √© uma s√©rie que mostra o n√∫mero de jogadores, ordenados do estado com o maior n√∫mero de jogadores para o estado com o menor n√∫mero de jogadores.
"""

# Observe aqui o value_Counts ja √© mais simples ainda e funciona igual
dfPlayers.birth_state.value_counts()

7Ô∏è‚É£  Qual ou quais s√£o os jogadores mais altos?

max_altura  = dfPlayers.height.max()
max_altura

dfPlayers[ dfPlayers.height == max_altura]

min_altura = dfPlayers.height.min()
min_altura

dfPlayers[ dfPlayers.height == min_altura]

# https://datasets-aulas.s3.amazonaws.com/dados+cota%C3%A7%C3%B5es/TSLA.csv

dfPlayers[ dfPlayers['IMC'] == dfPlayers['IMC'].min() ]
dfPlayers.groupby('birth_city')['Player'].count()

dfPlayersMinAltura = dfPlayers.sort_values(by=['height'], ascending=True).head(20)
dfPlayersMinAltura



